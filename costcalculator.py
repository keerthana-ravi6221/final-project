import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import altair as alt

def show():
    st.header("Cost Analysis Dashboard")
    # Paste your cost analysis dashboard code here
# TNERC Tariff rates based on July 2024 order
electricity_cost_per_kwh = {
    "Industries": 7.25,
    "Govt. Institutions": 7.50,
    "Private Institutions": 8.00,
    "Miscellaneous": 9.10,
    "Construction": 12.85,
    "Domestic (<500 kW)": {"0-100 kW": 4.80, "101-200 kW": 6.00, "201-400 kW": 7.15, "401-500 kW": 8.60},
    "Domestic (>500 kW)": {"501-600 kW": 8.40, "601-800 kW": 9.45, "801-1000 kW": 10.50, "Above 1000 kW": 11.55},
    "LT Public Lighting": 8.55,
    "LT Industries": 8.00,
    "LT Agriculture": 4.80,
    "LT Miscellaneous": 10.15,
    "LT Construction": 12.85,
}

def calculate_domestic_cost(units_used):
    """
    Calculates the cost for domestic consumers based on the units used.

    Args:
        units_used (int): The number of kW consumed.

    Returns:
        float: The cost of electricity consumption.
    """
    if units_used <= 100:
        return electricity_cost_per_kwh["Domestic (<500 kW)"]["0-100 kW"] * units_used
    elif 101 <= units_used <= 200:
        return electricity_cost_per_kwh["Domestic (<500 kW)"]["101-200 kW"] * units_used
    elif 201 <= units_used <= 400:
        return electricity_cost_per_kwh["Domestic (<500 kW)"]["201-400 kW"] * units_used
    elif 401 <= units_used <= 500:
        return electricity_cost_per_kwh["Domestic (<500 kW)"]["401-500 kW"] * units_used
    elif 501 <= units_used <= 600:
        return electricity_cost_per_kwh["Domestic (>500 kW)"]["501-600 kW"] * units_used
    elif 601 <= units_used <= 800:
        return electricity_cost_per_kwh["Domestic (>500 kW)"]["601-800 kW"] * units_used
    elif 801 <= units_used <= 1000:
        return electricity_cost_per_kwh["Domestic (>500 kW)"]["801-1000 kW"] * units_used
    else:
        return electricity_cost_per_kwh["Domestic (>500 kW)"]["Above 1000 kW"] * units_used

def calculate_cost(category, units_used):
    """
    Calculates the cost of electricity consumption based on the category and units used.

    Args:
        category (str): The category of the consumer.
        units_used (int): The number of kW consumed.

    Returns:
        float: The cost of electricity consumption.
    """
    if category == "Domestic (<500 kW)" or category == "Domestic (>500 kW)":
        return calculate_domestic_cost(units_used)
    else:
        return electricity_cost_per_kwh[category] * units_used

def calculate_savings(units_used, solar_generation, wind_generation, category):
    """
    Calculates the savings achieved by using solar and wind energy.

    Args:
        units_used (int): Total kW consumed.
        solar_generation (float): kW generated by solar system.
        wind_generation (float): kW generated by wind turbine.
        category (str): The consumer category

    Returns:
        float: The total savings.
    """
    cost_without_solar_wind = calculate_cost(category, units_used)
    net_consumption = max(0, units_used - solar_generation - wind_generation)  # Ensure non-negative
    cost_with_solar_wind = calculate_cost(category, net_consumption)
    return cost_without_solar_wind - cost_with_solar_wind



def main():
    """
    Main function to run the energy savings calculator using Streamlit.
    """
    st.title("Energy Savings Calculator")

    # User Inputs
    st.header("Electricity Consumption Details")
    category = st.selectbox("Select Consumer Category:", list(electricity_cost_per_kwh.keys()))
    units_used = st.number_input("Enter your monthly electricity consumption (kW):", min_value=0)

    st.header("Solar System Details")
    solar_size_kw = st.number_input("Enter your solar system size (kW):", min_value=0.0)
    solar_generation_per_day = solar_size_kw * 4.5  # Assuming 4.5 hours of sunlight per day
    solar_generation_per_month = solar_generation_per_day * 30
    st.write(f"Estimated monthly solar generation: {solar_generation_per_month:.2f} kW")

    st.header("Wind Energy Details")
    wind_turbine_kw = st.number_input("Enter your wind turbine capacity (kW):", min_value=0.0)
    average_wind_speed = st.slider("Enter average wind speed (m/s):", min_value=0, max_value=25, value=10)
    # Simplified wind power calculation
    wind_generation_per_month = 0.5 * 1.225 * (average_wind_speed ** 3) * (wind_turbine_kw/1000) * 24 * 30

    st.write(f"Estimated monthly wind generation: {wind_generation_per_month:.2f} kW")

    # Calculate Savings
    savings = calculate_savings(units_used, solar_generation_per_month, wind_generation_per_month, category)

    # Display Results
    st.header("Results")
    st.write(f"Total Monthly Consumption: {units_used} kW")
    cost_without_solar_wind = calculate_cost(category, units_used)
    st.write(f"Cost without Solar and Wind: ₹{cost_without_solar_wind:.2f}")
    cost_with_solar_wind = calculate_cost(category, max(0, units_used - solar_generation_per_month - wind_generation_per_month))
    st.write(f"Cost with Solar and Wind: ₹{cost_with_solar_wind:.2f}")
    st.write(f"Savings: ₹{savings:.2f}")

    # Visualization
    st.header("Cost and Savings Visualization")

    # Create a DataFrame for plotting
    plot_data = pd.DataFrame({
        'Cost Type': ['Without Solar/Wind', 'With Solar/Wind'],
        'Cost': [cost_without_solar_wind, cost_with_solar_wind]
    })

    # Create a bar chart using Streamlit's altair
    chart = alt.Chart(plot_data).mark_bar().encode(
        x='Cost Type',
        y='Cost',
        color='Cost Type',
        tooltip=['Cost Type', 'Cost']  # Add tooltip for interactivity
    ).properties(
        title='Comparison of Electricity Costs'
    )
    st.altair_chart(chart, use_container_width=True)  # Make chart responsive

    # Display savings as a single number
    st.subheader("Total Savings")
    st.markdown(f"<h1 style='text-align: center; color: green;'>₹{savings:.2f}</h1>", unsafe_allow_html=True)



if __name__ == "__main__":
    main()
